#!/usr/bin/env node
/*** 模块引用 ***/
var app = require('../app');
var os = require('os');
var debug = require('debug')('Catalog:server');//('MiddleWare_HeartData:server');
var http = require('http');
var WebSocketServer = require("ws").Server;
/*** 自定义模块 ***/
var WSCtrl = {
  //管理对象
  manager:  require("../Libs/Websocket/Manager"),
  //返回对象
  response: require("../Libs/WebSocket/Type/Response")
};


//服务器管理对象（注册一些标准化方法）
var ServerManager = {
  /**
   * Normalize a port into a number, string, or false.
   * @val                 表示端口好的其它类型
   */
  normalizePort:  function(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
      return val;                                       // named pipe
    }
    if (port >= 0) {
      return port;                                      // port number
    }
    return false;
  },
  /**
   * 获取本机ip地址
   */
  getLocalAddress:  function(){
    var IPv4,hostName;
    hostName=os.hostname();
    //console.log(os.networkInterfaces());
    //printObject(os.networkInterfaces());
    //for(var i=0;i<os.networkInterfaces().en0.length;i++){
    //  if(os.networkInterfaces().en0[i].family=='IPv4'){
    //    IPv4=os.networkInterfaces().en0[i].address;
    //  }
    //}
    //console.log('----------local IP: '+IPv4);
    //console.log('----------local host: '+hostName);
    function printObject(obj){
      var temp = "";
      for(var key in obj){//用javascript的for/in循环遍历对象的属性
        temp += key+":"+obj[key]+"\n";
        console.log(key);
      }
      //console.log(temp);//结果：cid:C0 \n ctext:区县
    }
  },
  //http相关内容
  http:{
    /**
     * Event listener for HTTP server "error" event.
     */
    onError:  function(error){
      if (error.syscall !== 'listen') {
        throw error;
      }

      var bind = typeof port === 'string'
          ? 'Pipe ' + port
          : 'Port ' + port;

      // handle specific listen errors with friendly messages
      switch (error.code) {
        case 'EACCES':
          console.error(bind + ' requires elevated privileges');
          process.exit(1);
          break;
        case 'EADDRINUSE':
          console.error(bind + ' is already in use');
          process.exit(1);
          break;
        default:
          throw error;
      }
    },
    /**
     * Event listener for HTTP server "listening" event.
     */
    onListening:  function(){
      var addr = server.address();
      var bind = typeof addr === 'string'
          ? 'pipe ' + addr
          : 'port ' + addr.port;
      debug('Listening on ' + bind);
    }
  },
  //websocket相关
  WebSocket:{
    //客户端（含有{url, clients:[{obj:, weight:}, ..]}）
    resources:                          [],
    /**
     * 验证连接
     */
    socketVerify: function(info){
      //console.log("验证连接");
      //console.log(info);
      return true;
    },
    /**
     * 有一个连接时
     * @ws                  websocket连接对象
     */
    onConnection: function(ws){
      //登记客户端
      WSCtrl.manager.addClient(ws);

      //注册函数
      ws.on("message", ServerManager.WebSocket.onMsg);
      ws.on("close", ServerManager.WebSocket.onClose);
    },
    /**
     * 接受到消息时的处理函数
     */
    onMsg:  function(req, flag){
      var i, j;
      var client = this;
      
      var address;
      var desc;
      //找到这个client
      try{
        var msg = JSON.parse(req);
        //根据消息码操作
        switch(msg.code){
          //操作索引
          case 3001:
                //收集资源
                WSCtrl.manager.gatherResources(client, msg.data);
                break;
          //寻找有这些资源的客户端
          case 3002:
                //通知客户端，这些资源该怎么找
                WSCtrl.manager.findClients2AcquireData(client, msg.data);
                break;
          //转发提供描述
          case 3003:
                try{
                  //获取地址、描述信息
                  address = msg.data.target.address;
                  desc = msg.data.desc;
                  //调用方法
                  WSCtrl.manager.transferOfferDesc(client, address, desc);
                }catch (e){
                  //获取内容报错
                }
                break;
          //转发响应描述
          case 3004:
                try{
                  address = msg.data.target.address;
                  desc = msg.data.desc;
                  //调用方法
                  WSCtrl.manager.transferAnswerDesc(client, address, desc);
                }catch (e){}
                break;
        }
      }catch(e){}
    },
    /**
     * 关闭一个连接时
     */
    onClose:    function(event){
      WSCtrl.manager.deleteClient(this);
    }
  }
};


/*** 开启HTTP服务器 ***/
//Get port from environment and store in Express.
var port = ServerManager.normalizePort(process.env.PORT || '10000');
app.set('port', port);
//Create HTTP server.
var server = http.createServer(app);
//Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', ServerManager.http.onError);
server.on('listening', ServerManager.http.onListening);

ServerManager.getLocalAddress();

/*** 开启WebSocket服务器 ***/
var wss = new WebSocketServer({
  server:server,
  verifyClient: ServerManager.WebSocket.socketVerify
});
wss.on("connection", ServerManager.WebSocket.onConnection);

//var Resource = require("../Libs/WebSocket/Type/Resource");
//var resource = Resource("http://localhost/audio/Silense.mp3");
//resource.then(function(obj){
//  console.log(obj);
//}).catch();

//var utils = require("../Libs/Utils");
//utils.url.getMd5("http://localhost:3000/audio/Silense.mp3").then(function(md5){
//  console.log(md5);
//}).catch(function(e){
//  console.log(e);
//});